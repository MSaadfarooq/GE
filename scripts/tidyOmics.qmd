---
title: "Tidy RNAseq"
format: pptx
editor: visual
---

## Load Libraries and data

```{r}
library(tidySummarizedExperiment)
library(tidybulk)
```

```{r}
library(ggplot2)
library(dplyr)
library(tximeta)
library(org.Hs.eg.db)
```

```{r}
load("~/rna_seq/cb.rda")
```

### Explore SE

When you click the **Render** button a presentation will be generated that includes both content and the output of embedded code. You can embed code like this:

```{r}
gse %>% slice(2)
```

------------------------------------------------------------------------

-   it could be blank
-   but i added code

```{r}
gse %>% select(.sample)
```

```{r}
gse %>% distinct(.sample, bw, sex)
```

```{r}
gse %>% distinct(gene_biotype)
```

```{r}
gse %>% rename(seq=libSize)
```

We could use `unite` to combine multiple columns into a single column.

```{r}
gse %>% unite('SampType', c(names, bw), sep = "_")
```

```{r}
gse %>% group_by(bw) %>%
    summarise(mean_count=mean(counts))
```

Combine `group_by`, `mutate` and `filter` to get the transcripts with mean count \> 0.

```{r}
gse %>%
    group_by(.feature) %>%
    mutate(mean_count=mean(counts)) %>%
    filter(mean_count > 0)
```

### Plotting

```{r}
# set theme
my_theme <-
    list(
        scale_fill_brewer(palette="Set1"),
        scale_color_brewer(palette="Set1"),
        theme_bw() +
            theme(
                panel.border=element_blank(),
                axis.line=element_line(),
                panel.grid.major=element_line(linewidth=0.2),
                panel.grid.minor=element_line(linewidth=0.1),
                text=element_text(size=12),
                legend.position="bottom",
                aspect.ratio=1,
                strip.background=element_blank(),
                axis.title.x=element_text(margin=margin(t=10, r=10, b=10, l=10)),
                axis.title.y=element_text(margin=margin(t=10, r=10, b=10, l=10))
            )
    )
```

We can treat `gse_tidy` as a normal tibble for plotting

```{r}
# distribution of counts per sample
gse %>%
    ggplot(aes(counts + 1, group=.sample, color=bw)) +
    geom_density() +
    scale_x_log10() +
    my_theme
```

```{r}
gse |>
  filter(.feature %in% c("ENSG00000000460","ENSG00000001167")) |> 
  ggplot(aes(bw, counts, color=sex, group=sex)) + 
  geom_point(size=2) + geom_line() + facet_wrap(~.feature)
```

## Tidy Bulk

#### Scale `counts`

We may want to compensate for sequencing depth, scaling the transcript abundance (e.g., with TMM algorithm). `scale_abundance` takes a tibble, column names (as symbols; for `sample`, `transcript` and `count`) and a method as arguments and returns a tibble with additional columns with scaled data as <NAME OF COUNT COLUMN>\_scaled.

```{r}
gse_norm <- gse |> identify_abundant(factor_of_interest = bw) |>  scale_abundance()
```

```{r}
# plot the scaled density to check the scaling outcome
gse_norm |>
    ggplot(aes(counts_scaled + 1, group=.sample, color=bw)) +
    geom_density() +
    scale_x_log10() + 
    my_theme
```

### Filter `variable transcripts`

In some experiments, we may want to identify and filter variable transcripts. Especially, when integrating with methylation data to identify DNAm probe beta value associate with gene expression, we want to make sure we save compute time by filtering to varaible genes.

```{r}
gse_norm.Var <- gse_norm |> keep_variable()
```

### PCA

```{r}
norm.PCA <- gse_norm |> reduce_dimensions(method = "PCA", .dims = 3)

norm.PCA |> pivot_sample() |> dplyr::select(contains("PC"), everything())

norm.PCA |>
	 pivot_sample() |>
  GGally::ggpairs(columns = 3:5, ggplot2::aes(colour=bw))
```

```{r}
norm.PCA |> pivot_sample() |> 
  ggplot(aes(x = PC1, y = PC2, colour = bw)) +
  geom_point() +
  geom_text_repel(aes(label = names), show.legend = FALSE) +
  my_theme
```

```{r}
## PCA3 plot
norm.PCA %>% pivot_sample() %>%
  plot_ly(
    x = ~ PC1,
    y = ~ PC2,
    z = ~ PC3,
    color = ~ bw)
```

### Test `differential abundance`

It returns tibble with stats results.

```{r}
assay(gse, "counts") <- round(assay(gse, "counts"))

#gse <- addIds(gse, "SYMBOL")
```

```{r}
da <- gse |> test_differential_abundance(~bw, method = "DESeq2")
```

```{r}
da_res <- da %>% pivot_transcript()
table(tidy_sig = da_res$padj < .1)
```

### Adjust `counts`

We may want to adjust `counts` for (known) unwanted variation. `adjust_abundance` takes as arguments a tibble, column names (as symbols; for `sample`, `transcript` and `count`) and a formula representing the desired linear model where the first covariate is the factor of interest and the second covariate is the unwanted variation, and returns a tibble with additional columns for the adjusted counts as `<COUNT COLUMN>_adjusted`

```{r}
gse_norm.adj <- gse_norm |>
  adjust_abundance(.factor_unwanted = batch,
                   .factor_of_interest = bw, method="combat")
```

## Cell type composition

**Cibersort:** default signature called LM22 to define the cell types. LM22 contains 547 genes that identify *22 human immune cell types*.

```{r}
gse.cibersort <- gse |>
	deconvolve_cellularity(action="get", cores=8, prefix = "cibersort_", .transcript = symbol) 
```

```{r}
gse.cibersort |>
	pivot_longer(names_to= "Cell_type_inferred", 
		values_to = "proportion", 
		names_prefix ="cibersort_", 
		cols=contains("cibersort_")
	) |>
  ggplot(aes(x=Cell_type_inferred, y=proportion, fill=bw)) +
  geom_boxplot() +
  facet_wrap(~bw) + scale_fill_brewer(palette = "Set1") + theme_bw() +
  theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5), aspect.ratio=1/5)
```

#### Differential cell-type abundance

```{r}
gse |> test_differential_cellularity( ~ bw)
```

```{r}
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
library(plyranges)
```

```{r}
# Add the ENSEMBL ID and pull out the two tissue-specific sets
g <- genes(TxDb.Hsapiens.UCSC.hg19.knownGene)
g <- g %>% mutate(ensembl = mapIds(org.Hs.eg.db, gene_id, "ENSEMBL", "ENTREZID"))
bladder_g <- g %>% filter(ensembl %in% bladder_expr)
kidney_g <- g %>% filter(ensembl %in% kidney_expr)
```

Combine the two sets with `bind_ranges`, and change the feature size from the whole gene extent (the range from the leftmost exon to rightmost exon), to just the TSS, using `anchor_5p` and `mutate.`

```{r}
tss <- bind_ranges(bladder=bladder_g,
                   kidney=kidney_g,
                   .id="gtissue") %>%
  anchor_5p() %>%
  mutate(width=1)
```

```{r}
# Glu metabolism
tab <- AnnotationDbi::select(org.Hs.eg.db, "GO:0006006", "SYMBOL", "GO")

tab <- tab[!duplicated(tab$SYMBOL),]
glu <- tab$SYMBOL
```

here we create a new variable to plot the samples `sample_name`.

```{r}

HK1 <- gse %>%
  filter(sex == "Female") %>%
  mutate(sample_name = .sample %>%
           factor(levels = unique(.)),
         condition = bw %>% factor(c("normal","low")))
```

```{r}
HK1 <- HK1 %>%
  keep_abundant(factor_of_interest = bw) %>%
  scale_abundance(method="RLE") # DESeq2 scaling
```

```{r}
# create log scaled plot
HK1 |> ggplot(aes(.sample, counts_scaled + 1)) +
  geom_boxplot() +  scale_y_log10()
```

genes involved in GLU metabolism, make a line plot, highlighting HK1

```{r}
HK1 %>%
  filter(SYMBOL %in% glu) %>%
  mutate(logcounts = log10(counts_scaled + 1)) %>%
  mutate(HK = ifelse(SYMBOL == "HK1", "red2", "black")) %>%
  group_by(.feature) %>%
  mutate(logcounts = logcounts - mean(logcounts)) %>%
  ungroup() %>%
  ggplot(aes(.sample, logcounts, group=.feature, color=HK)) +
  geom_point() +
  geom_line() + theme_bw() +
  scale_color_identity()
```

### DE plot

want to split the genes involved in pluripotency by the DE result (the significance and LFC), and then add the gene symbol to the side.

```{r}
plot_data <- HK1 %>% # after DE on HK1
  filter(SYMBOL %in% glu) %>%
  mutate(logcounts = log10(counts_scaled + 1)) %>%
  mutate(Hexokinase = ifelse(SYMBOL == "SLC25A39", "red", "black")) %>%
  group_by(.feature) %>%
  mutate(logcounts = logcounts - mean(logcounts)) %>%
  ungroup() %>%
  mutate(gene_type = case_when(
           padj < .1 & log2FoldChange > 0 ~ "up",
           padj < .1 & log2FoldChange < 0 ~ "down",
           TRUE ~ "null")) #table(plot_data$gene_type)
```

```{r}
library(ggrepel)
plot_data %>%
  filter(gene_type != "null") %>%
  ggplot(aes(.sample, logcounts, group=.feature, color=Hexokinase)) +
  geom_point() +
  geom_line() +
  geom_text_repel(data=plot_data %>%
                    filter(.sample == "low", gene_type != "null"),
                  aes(.sample, logcounts, label=SYMBOL),
                  nudge_x=.5, seed=1, max.overlaps=Inf) +
  scale_color_identity() +
  facet_wrap(~gene_type) +
  scale_x_discrete(expand = expansion(add = 2)) +
  xlab("sample") + theme_bw()
```
