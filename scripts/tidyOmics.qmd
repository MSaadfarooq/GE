---
title: "bioinfo"
format: pptx
editor: visual
---

## Load Libraries and data

```{r}
library(tidySummarizedExperiment)
library(tidybulk)
library(ggplot2)
library(dplyr)
library(org.Hs.eg.db)
```

```{r}
gse <- readRDS("~/rna_seq/EDA/Outputs/gse_CB.RDS")
```

## Code

When you click the **Render** button a presentation will be generated that includes both content and the output of embedded code. You can embed code like this:

```{r}
gse %>% slice(2)
```

------------------------------------------------------------------------

-   it could be blank
-   but i added code

```{r}
gse %>% select(.sample)
```

```{r}
gse %>% distinct(.sample, bw, sex)
```

```{r}
gse %>% distinct(gene_biotype)
```

```{r}
gse %>% rename(seq=libSize)
```

We could use `unite` to combine multiple columns into a single column.

```{r}
CB_gse %>% unite('SampType', c(bw, sex), sep = "_")
```

```{r}
CB_gse %>% group_by(bw) %>%
    summarise(total_counts=sum(counts))

CB_gse %>% group_by(bw) %>%
    summarise(mean_count=mean(counts))
```

Combine `group_by`, `mutate` and `filter` to get the transcripts with mean count \> 0.

```{r}
gse %>%
    group_by(.feature) %>%
    mutate(mean_count=mean(counts)) %>%
    filter(mean_count > 0)
```

### Plotting

```{r}
# set theme
my_theme <-
    list(
        scale_fill_brewer(palette="Set1"),
        scale_color_brewer(palette="Set1"),
        theme_bw() +
            theme(
                panel.border=element_blank(),
                axis.line=element_line(),
                panel.grid.major=element_line(linewidth=0.2),
                panel.grid.minor=element_line(linewidth=0.1),
                text=element_text(size=12),
                legend.position="bottom",
                aspect.ratio=1,
                strip.background=element_blank(),
                axis.title.x=element_text(margin=margin(t=10, r=10, b=10, l=10)),
                axis.title.y=element_text(margin=margin(t=10, r=10, b=10, l=10))
            )
    )
```

We can treat `gse_tidy` as a normal tibble for plotting

```{r}
# distribution of counts per sample
CB_gse %>%
    ggplot(aes(counts + 1, group=.sample, color=bw)) +
    geom_density() +
    scale_x_log10() +
    my_theme
```

```{r}
CB_gse |> 
  filter(.feature %in% c("CB0002","CB0017")) |> # `.feature` a special name
  ggplot(aes(bw, counts, color=sex, group=sex)) + 
  geom_point(size=2) + geom_line() #+ facet_wrap(~.feature)
```

```{r}
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
library(org.Hs.eg.db)
library(plyranges)
```

```{r}
# Add the ENSEMBL ID and pull out the two tissue-specific sets
g <- genes(TxDb.Hsapiens.UCSC.hg19.knownGene)
```

```{r}
g <- g %>% mutate(ensembl = mapIds(org.Hs.eg.db, gene_id, "ENSEMBL", "ENTREZID"))
bladder_g <- g %>% filter(ensembl %in% bladder_expr)
kidney_g <- g %>% filter(ensembl %in% kidney_expr)
```

Combine the two sets with `bind_ranges`, and change the feature size from the whole gene extent (the range from the leftmost exon to rightmost exon), to just the TSS, using `anchor_5p` and `mutate`

```{r}
tss <- bind_ranges(bladder=bladder_g,
                   kidney=kidney_g,
                   .id="gtissue") %>%
  anchor_5p() %>%
  mutate(width=1)
```

```{r}
assay(gse, "counts") <- round(assay(gse, "counts"))

gse <- addIds(gse, "SYMBOL")
```

```{r}
# Glu metabolism
tab <- AnnotationDbi::select(org.Hs.eg.db, "GO:0006006", "SYMBOL", "GO")

tab <- tab[!duplicated(tab$SYMBOL),]
glu <- tab$SYMBOL
```

here we create a new variable to plot the samples `sample_name`.

```{r}

gl_metab <- gse %>%
  filter(line == "HK1") %>%
  mutate(sample_name = .sample %>%
           factor(levels = unique(.)),
         condition = bw %>% factor(c("normal","low")))
```

```{r}
gse <- gse %>%
  keep_abundant(factor_of_interest = bw) %>%
  scale_abundance(method="RLE") # DESeq2 scaling
```

```{r}
# create log scaled plot
gse |> ggplot(aes(.sample, counts_scaled + 1)) +
  geom_boxplot() +  scale_y_log10()
```

genes involved in GLU metabolism, make a line plot, highlighting HK1

```{r}
gse %>%
  filter(SYMBOL %in% glu) %>%
  mutate(logcounts = log10(counts_scaled + 1)) %>%
  mutate(HK = ifelse(SYMBOL == "HK1", "red2", "black")) %>%
  group_by(.feature) %>%
  mutate(logcounts = logcounts - mean(logcounts)) %>%
  ungroup() %>%
  ggplot(aes(.sample, logcounts, group=.feature, color=HK)) +
  geom_point() +
  geom_line() + theme_bw() +
  scale_color_identity()
```

DE

```{r}
res <- gse |> test_differential_abundance(~bw, method = "DESeq2")
```

```{r}
tidy_res <- res %>%
  pivot_transcript()
table(tidy_sig = tidy_res$padj < .1)
```

want to split the genes involved in pluripotency by the DE result (the significance and LFC), and then add the gene symbol to the side.

```{r}
plot_data <- res %>%
  filter(SYMBOL %in% glu) %>%
  mutate(logcounts = log10(counts_scaled + 1)) %>%
  mutate(Hexokinase = ifelse(SYMBOL == "HK1", "red", "black")) %>%
  group_by(.feature) %>%
  mutate(logcounts = logcounts - mean(logcounts)) %>%
  ungroup() %>%
  mutate(gene_type = case_when(
           padj < .1 & log2FoldChange > 0 ~ "up",
           padj < .1 & log2FoldChange < 0 ~ "down",
           TRUE ~ "null"))
```

```{r}
library(ggrepel)
plot_data %>%
  filter(gene_type != "null") %>%
  ggplot(aes(.sample, logcounts, group=.feature, color=Hexokinase)) +
  geom_point() +
  geom_line() +
  geom_text_repel(data=plot_data %>%
                    filter(.sample == "low", gene_type != "null"),
                  aes(.sample, logcounts, label=SYMBOL),
                  nudge_x=.5, seed=1, max.overlaps=Inf) +
  scale_color_identity() +
  facet_wrap(~gene_type) +
  scale_x_discrete(expand = expansion(add = 2)) +
  xlab("sample") + theme_bw()
```

```{r}
norm.PCA <- gse |> reduce_dimensions(method = "PCA", .dims = 3)

#norm.PCA |> pivot_sample() |> dplyr::select(contains("PC"), everything())

norm.PCA |>
	 pivot_sample() |>
  GGally::ggpairs(columns = 3:5, ggplot2::aes(colour=bw))
```

```{r}

gse.cibersort =
	gse |>
	deconvolve_cellularity(action="get", cores=8, prefix = "cibersort__")  
```
